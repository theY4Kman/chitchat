{% macro condition(num) %}{% if num == 1 %}Escrow{% elif num == 2 %}Guarantor{% elif num == 3 %}Arbitrator{% else %}Unknown{% endif %}{% endmacro -%}
{% macro fmttime(seconds) %}[{{ (seconds / 60)|int }}:{% if (seconds % 60 < 10) %}0{% endif %}{{ (seconds % 60)|int }}]{% endmacro -%}
{% macro tagclass(boolean) %}{% if boolean == None %}blanktag{% elif boolean %}hastag{% else %}notag{% endif %}{% endmacro -%}
{% macro answers(user) -%}
{% if not user.answers.none %}
                    <ol>
                      <li>
                        <span class="question">At the end of the game, did you think the situation was fair? Why or why not?</span>
                        <br />
                        <blockquote class="answer">{{ user.answers.situation_fair }}</blockquote>
                      </li>
                      <li class="post_seller">
                        <span class="question">Did you believe the seller was telling the truth? Why or why not?</span>
                        <br />
                        <blockquote class="answer">{{ user.answers.seller_truth }}</blockquote>
                      </li>
                      <li class="post_buyer">
                        <span class="question">Did you believe the buyer was telling the truth? Why or why not?</span>
                        <br />
                        <blockquote class="answer">{{ user.answers.buyer_truth }}</blockquote>
                      </li>
                      <li class="post_insurer">
                        <span class="question">Did you believe the mediator was fair? Why or why not?</span>
                        <br />
                        <blockquote class="answer">{{ user.answers.insurer_truth }}</blockquote>
                      </li>
                      <li>
                        <span class="question">Do you have any other comments about this experiment? We appreciate your feedback.</span>
                        <br />
                        <blockquote class="answer">{{ user.answers.comments }}</blockquote>
                      </li>
                    </ol>
{%- else %}
                    <span>User did not complete survey.</span>
{%- endif -%}
{% endmacro -%}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>CHITchat Admin</title>
    <link rel="stylesheet" href="/css/screen.css" type="text/css" media="screen" />
    <link rel="stylesheet" href="/css/ui-lightness/jquery-ui-1.8.14.custom.css" type="text/css" media="screen" />
    <script type="text/javascript" src="/js/jquery-1.6.2.min.js"></script>
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js"></script>
    <script type="text/javascript">
        function togglehastag(tag)
        {
            $('#games tr.head td.hastag[tagname="' + tag + '"]').parent().toggle().next().hide();
        }
        function hidehastag(tag)
        {
            $('#games tr.head td.hastag[tagname="' + tag + '"]').parent().hide().next.hide();
        }
        function showhastag(tag)
        {
            $('#games tr.head td.hastag[tagname="' + tag + '"]').parent().show();
        }
        
        function showAllTag(tag)
        {
            $('#games tr.head td[tagname="' + tag + '"]').parent().show();
        }
        function hideTagFalse(tag)
        {
            $('#games tr.head td.notag[tagname="' + tag + '"]').parent().hide().next().hide();
        }
        function hideTagTrue(tag)
        {
            $('#games tr.head td.hastag[tagname="' + tag + '"]').parent().hide().next().hide();
        }
        
        function fixAlt()
        {
            var elems = $('tr.head:visible');
            for (var i in elems.toArray())
            {
                if (i % 2 == 1)
                    $(elems[i]).addClass('alt');
                else
                    $(elems[i]).removeClass('alt');
            }
        }
        
        var searchtags = [];
        var tags = {};
        var SHOW_ALL = 0;
        var HIDE_FALSE = 1;
        var HIDE_TRUE = 2;
        
        function filtertags(tags, use_oldset)
        {
            var filtered = false;
            $('#games tr.head').hide().next().hide();
            
            match_tags(searchtags).show();
            var rowtags = $('#games tr.head:visible td[tagname]');
            
            for (tag in tags)
                if (tags[tag] == HIDE_FALSE)
                {
                    rowtags = rowtags.filter('.hastag[tagname="' + tag + '"]')
                        .siblings('[tagname]').andSelf();
                    filtered = true;
                }
                else if (tags[tag] == HIDE_TRUE)
                {
                    rowtags = rowtags.filter('.notag[tagname="' + tag + '"]')
                        .siblings('[tagname]').andSelf();
                    filtered = true;
                }
            
            $('#games tr.head').hide().next().hide();
            if (filtered || searchtags.length > 0)
                rowtags.parent().show();
            else
                $('#games tr.head').show();
            
            fixAlt();
        }
        
        function cycletag(tag)
        {
            if (typeof tags[tag] == 'undefined')
                tags[tag] = SHOW_ALL;
            
            if (++tags[tag] > HIDE_TRUE)
                tags[tag] = SHOW_ALL;
            
            var elem = $('th[tagname="' + tag +'"]');
            switch (tags[tag])
            {
            case SHOW_ALL:
                elem.removeClass('hastag notag blanktag');
                break;
            
            case HIDE_FALSE:
                elem.addClass('hastag').removeClass('notag');
                break;
            
            case HIDE_TRUE:
                elem.removeClass('hastag').addClass('notag');
                break;
            }
            
            filtertags(tags);
        }
        
        function addtag(key, tag, prefix, callback)
        {
            if (prefix == undefined)
                prefix = '';
            $.post('add/', {key: key, prefix: prefix, tag: tag}, callback, 'json');
        }
        function removetag(key, tag, prefix, callback)
        {
            if (prefix == undefined)
                prefix = '';
            $.post('remove/', {key: key, prefix: prefix, tag: tag}, callback, 'json');
        }
        function updatetags(key, tags, prefix, callback)
        {
            if (prefix == undefined)
                prefix = '';
                
            var tags_js = '[]';
            if (tags.length > 0)
                tags_js = '["' + tags.join('","') + '"]';
            
            $.post('update/', {key: key, prefix: prefix, tags: tags_js}, callback, 'json');
        }
        
        function setHasTag(elem)
        {
            elem.html('True').addClass('hastag').removeClass('notag blanktag');
        }
        function setNoTag(elem)
        {
            elem.html('False').addClass('notag').removeClass('hastag blanktag');
        }
        
        function clickTag(elem)
        {
            if (elem.attr('tagname') == 'has_chat' || elem.attr('tagname') == 'is_mturk')
                return;
            
            if (elem.hasClass('hastag'))
            {
                removetag(elem.parent().attr('gamekey'), elem.attr('tagname'), 'game');
                setNoTag(elem);
            }
            else if (elem.hasClass('notag'))
            {
                addtag(elem.parent().attr('gamekey'), elem.attr('tagname'), 'game');
                setHasTag(elem);
            }
        }
        
        function match_tags(match)
        {
            var tags_elem = $('textarea.chattags').add('textarea.usertags');
            var elems = new Array();
            
            for (var i in tags_elem)
            {
                if (typeof tags_elem[i] != "object")
                    continue;
                
                var e = $(tags_elem[i]);
                var tags = e.val().split(',');
                var matched = true;
                
                for (var j in match)
                {
                    if (tags.indexOf(match[j]) == -1)
                    {
                        matched = false;
                        break;
                    }
                }
                
                if (matched)
                    elems.push(tags_elem[i]);
            }
            
            return $(elems).parents('.body').prev();
        }
        
        function search_tags(match)
        {
            $('#games tr.head').hide().next().hide();
            filtertags(tags, true);
            fixAlt();
        }
        
        $(function()
        {
            (function($){
              var ph = "PLACEHOLDER-INPUT";
              var phl = "PLACEHOLDER-LABEL";
              var boundEvents = false;
              var default_options = {
                labelClass: 'placeholder'
              };
              
              //check for native support for placeholder attribute, if so stub methods and return
              var input = document.createElement("input");
              if ('placeholder' in input) {
                $.fn.placeholder = $.fn.unplaceholder = function(){}; //empty function
                delete input; //cleanup IE memory
                return;
              };
              delete input;

              $.fn.placeholder = function(options) {
                bindEvents();

                var opts = $.extend(default_options, options)

                this.each(function(){
                  var rnd=Math.random().toString(32).replace(/\./,'')
                    ,input=$(this)
                    ,label=$('<label style="position:absolute;display:none;top:0;left:0;"></label>');

                  if (!input.attr('placeholder') || input.data(ph) === ph) return; //already watermarked

                  //make sure the input tag has an ID assigned, if not, assign one.
                  if (!input.attr('id')) input.attr('id') = 'input_' + rnd;

                  label	.attr('id',input.attr('id') + "_placeholder")
                      .data(ph, '#' + input.attr('id'))	//reference to the input tag
                      .attr('for',input.attr('id'))
                      .addClass(opts.labelClass)
                      .addClass(opts.labelClass + '-for-' + this.tagName.toLowerCase()) //ex: watermark-for-textarea
                      .addClass(phl)
                      .text(input.attr('placeholder'));

                  input
                    .data(phl, '#' + label.attr('id'))	//set a reference to the label
                    .data(ph,ph)		//set that the field is watermarked
                    .addClass(ph)		//add the watermark class
                    .after(label);		//add the label field to the page

                  //setup overlay
                  itemIn.call(this);
                  itemOut.call(this);
                });
              };

              $.fn.unplaceholder = function(){
                this.each(function(){
                  var	input=$(this),
                    label=$(input.data(phl));

                  if (input.data(ph) !== ph) return;
                    
                  label.remove();
                  input.removeData(ph).removeData(phl).removeClass(ph);
                });
              };


              function bindEvents() {
                if (boundEvents) return;

                //prepare live bindings if not already done.
                $('.' + ph)
                  .live('click',itemIn)
                  .live('focusin',itemIn)
                  .live('focusout',itemOut);
                bound = true;

                boundEvents = true;
              };

              function itemIn() {
                var input = $(this)
                  ,label = $(input.data(phl));

                label.css('display', 'none');
              };

              function itemOut() {
                var that = this;

                //use timeout to let other validators/formatters directly bound to blur/focusout work first
                setTimeout(function(){
                  var input = $(that);
                  $(input.data(phl))
                    .css('top', input.position().top + 'px')
                    .css('left', input.position().left + 'px')
                    .css('display', !!input.val() ? 'none' : 'block');
                }, 200);
              };

            }(jQuery));
            
            $('#games tr.head h3').click(function() {
                $(this).parent().parent().next().toggle();
                return false;
            }).parent().parent().next().hide();
            
            $('.post_questionnaires h4').click(function() {
                $(this).next().toggle();
                return false;
            }).next().hide();
            
            $('#games thead th[tagname]').click(function() {
                cycletag($(this).attr('tagname'));
            })
            
            $('input[placeholder]').placeholder();
            $('#searchtags').keypress(function(e)
            {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code != 13)
                    return;
                
                searchtags = $(this).val().split(',');
                search_tags(searchtags);
            });
            
            $('#addtag').keypress(function(e)
            {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code != 13)
                    return;
                
                var tag = $(this).val();
                $(this).val('');
                
                if ($('th[tagname="' + tag + '"]').length > 0)
                    return;
                
                $('thead tr').append('<th tagname="' + tag +'">' + tag + '</th>');
                $('tr.head').append('<td class="notag" tagname="' + tag + '">False</td>');
                $('#games td[tagname="' + tag + '"]').click(function() {
                    clickTag($(this));
                });
            });
            
            $('#games td[tagname]').click(function() {
                clickTag($(this));
            });
            
            $('textarea.chattags').add('textarea.usertags').keypress(function(e)
            {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code != 13)
                    return;
                
                updatetags($(this).parents('.body').prev().attr('gamekey'), $(this).val().split(','), $(this).attr('prefix'));
                
                return false;
            })
            .blur(function()
            {
                updatetags($(this).parents('.body').prev().attr('gamekey'), $(this).val().split(','), $(this).attr('prefix'));
            });
        });
    </script>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
  </head>
  <body class="admin tagging">
    <div id="content">
      <h2>TAGGALORE</h2>
      <input type="text" id="addtag" placeholder="Add tag" />
      <br />
      <input type="text" id="searchtags" placeholder="Search tags">
      <table id="games" width="80%">
        <thead>
          <tr>
            <th width="40%">Key</th>
            <th tagname="has_chat">Has chat</td>
            <th tagname="is_mturk">All Mturk</th>
{%- for tag in tags.gettagnames('game') %}
            <th tagname="{{ tag }}">{{ tag }}</th>
{%- endfor -%}
          </tr>
        </thead>
        <tbody>
{% for game in games %}          <tr class="head {{ loop.cycle('', 'alt') }}" gamekey="{{ game.key }}">
            <td><h3>{{ util.gamekey(game.key) }} - (Cond {{ game.cond }}) {{ condition(game.cond) }}</h3></td>
            <td class="{{ tagclass(game.has_chat) }}" tagname="has_chat">{{ game.has_chat }}</td>
            <td class="{{ tagclass(util.is_game_mturk(util.gamekey(game.key))) }}" tagname="is_mturk">{{ util.is_game_mturk(util.gamekey(game.key)) }}</td>
{%- for tag in tags.gettagnames('game') %}
            <td class="{{ tagclass(tags.hastag(game.key, tag, 'game')) }}" tagname="{{ tag }}">{{ tags.hastag(game.key, tag, 'game') }}</td>
{%- endfor %}
          </tr>
          <tr class="body">
            <td colspan="50">
              <div class="messages">
                <div class="buyer_insurer_chat lfloat">
                  <h4>Buyer to Mediator</h4>
                  <div class="chatmessages" id="buyer_chatmessages">{% for evt in game.buyer_log %}
                    <div class="message {{ evt.from }}{% if evt.name != 'chat' %} event{% endif %}"><span class="time">{{ fmttime(evt.time - game.starttime) }}</span>{% if evt.name == 'chat' %}{{ evt.message }}{% else %}*** {{ evt.from|capitalize }} gave {% if evt.name == 'send_token' %}the token{% else %}25c{% endif %} to {{ evt.to|capitalize }}{% endif %}</div>{% endfor %}
                  </div>
                  <textarea class="chattags" prefix="buyer_insurer" placeholder="Buyer to Mediator tags, CSV">{{ tags.gettags(game.key, 'buyer_insurer')|default([], true)|join(',') }}</textarea>
                  <textarea class="chattags" prefix="insurer_buyer" placeholder="Mediator to Buyer tags, CSV">{{ tags.gettags(game.key, 'insurer_buyer')|default([], true)|join(',') }}</textarea>
                </div>
                <div class="seller_insurer_chat lfloat" style="margin-left: 20px;">
                  <h4>Seller to Mediator</h4>
                  <div class="chatmessages" id="seller_chatmessages">{% for evt in game.seller_log %}
                    <div class="message {{ evt.from }}{% if evt.name != 'chat' %} event{% endif %}"><span class="time">{{ fmttime(evt.time - game.starttime) }}</span>{% if evt.name == 'chat' %}{{ evt.message }}{% else %}*** {{ evt.from|capitalize }} gave {% if evt.name == 'send_token' %}the token{% else %}25c{% endif %} to {{ evt.to|capitalize }}{% endif %}</div>{% endfor %}
                  </div>
                  <textarea class="chattags" prefix="seller_insurer" placeholder="Seller to Mediator tags, CSV">{{ tags.gettags(game.key, 'seller_insurer')|default([], true)|join(',') }}</textarea>
                  <textarea class="chattags" prefix="insurer_seller" placeholder="Mediator to Seller tags, CSV">{{ tags.gettags(game.key, 'insurer_seller')|default([], true)|join(',') }}</textarea>
                </div>
                <div class="post_questionnaires lfloat">
                  <h4 class="{% if game.insurer.answers.none %}noanswers{% endif %}">Buyer - {{ game.buyer.key }}{% if game.buyer.is_mturk %} (MTURK){% endif %}</h4>
                  <div class="post_answers post_buyer">{{ answers(game.buyer) }}
                    <textarea class="usertags" prefix="buyer" placeholder="Buyer tags, CSV">{{ tags.gettags(game.key, 'buyer')|default([], true)|join(',') }}</textarea>
                  </div>
                  <h4 class="{% if game.insurer.answers.none %}noanswers{% endif %}">Seller - {{ game.seller.key }}{% if game.seller.is_mturk %} (MTURK){% endif %}</h4>
                  <div class="post_answers post_seller">{{ answers(game.seller) }}
                    <textarea class="usertags" prefix="seller" placeholder="Seller tags, CSV">{{ tags.gettags(game.key, 'seller')|default([], true)|join(',') }}</textarea>
                  </div>
                  <h4 class="{% if game.insurer.answers.none %}noanswers{% endif %}">Mediator - {{ game.insurer.key }}{% if game.insurer.is_mturk %} (MTURK){% endif %}</h4>
                  <div class="post_answers post_insurer">{{ answers(game.insurer) }}
                    <textarea class="usertags" prefix="insurer" placeholder="Mediator tags, CSV">{{ tags.gettags(game.key, 'insurer')|default([], true)|join(',') }}</textarea>
                  </div>
                </div>
              </div>
            </td>
          </tr>
{% endfor %}
        </tbody>
      </table>
    </div>
  </body>
</html>